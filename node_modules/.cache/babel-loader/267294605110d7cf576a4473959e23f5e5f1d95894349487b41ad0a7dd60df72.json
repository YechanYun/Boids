{"ast":null,"code":"import { CANVAS_HEIGHT, CANVAS_WIDTH, leftRightMargin, topBottomMargin, maxSpeed, minSpeed, RADIUS, SEP_FACTOR, ALIGN_FACTOR, COHESION_FACTOR, turnFactor } from \"./constants\";\nimport { useTurnFactor } from \"./Context\";\nexport class Bird {\n  constructor(initialX, initialY, initialVelX, initialVelY) {\n    this.x = initialX;\n    this.y = initialY;\n    this.velX = initialVelX;\n    this.velY = initialVelY;\n  }\n  keepVelocityWithinRange() {\n    // doesn't exceed maximum\n    // no divisions by 0, since speed is never 0\n    let max_sf = Math.min(maxSpeed / Math.sqrt(this.velX ** 2 + this.velY ** 2), 1);\n    this.velX *= max_sf;\n    this.velY *= max_sf;\n\n    // ensure velocity doesn't fall below minimum\n    let min_sf = Math.max(minSpeed / Math.sqrt(this.velX ** 2 + this.velY ** 2), 1);\n    this.velX *= min_sf;\n    this.velY *= min_sf;\n  }\n  separate(nearbyBirds) {\n    let close_dx = 0;\n    let close_dy = 0;\n    nearbyBirds.forEach(b => {\n      close_dx += this.x - b.x;\n      close_dy += this.y - b.y;\n    });\n    if (close_dx !== 0) {\n      this.velX += SEP_FACTOR / close_dx;\n    }\n    if (close_dy !== 0) {\n      this.velY += SEP_FACTOR / close_dy;\n    }\n    this.keepVelocityWithinRange();\n  }\n  align(nearbyBirds) {\n    //console.log(\"just outside if for align\")\n    if (nearbyBirds.size > 0) {\n      //console.log(\"INSIDE ALIGN, \", typeof nearbyBirds)\n      //console.log(nearbyBirds)\n      const {\n        sumVelX,\n        sumVelY\n      } = Array.from(nearbyBirds).reduce((acc, b) => ({\n        sumVelX: acc.sumVelX + b.velX,\n        sumVelY: acc.sumVelY + b.velY\n      }), {\n        sumVelX: 0,\n        sumVelY: 0\n      });\n      let avgVelX = sumVelX / nearbyBirds.size;\n      let avgVelY = sumVelY / nearbyBirds.size;\n      this.velX += (avgVelX - this.velX) * ALIGN_FACTOR;\n      this.velY += (avgVelY - this.velY) * ALIGN_FACTOR;\n    }\n    this.keepVelocityWithinRange();\n  }\n  cohere(nearbyBirds) {\n    // condition avoids division by 0\n    if (nearbyBirds.size > 0) {\n      const {\n        sumX,\n        sumY\n      } = Array.from(nearbyBirds).reduce((acc, b) => ({\n        sumX: acc.sumX + b.x,\n        sumY: acc.sumY + b.y\n      }), {\n        sumX: 0,\n        sumY: 0\n      });\n      let avgX = sumX / nearbyBirds.size;\n      let avgY = sumY / nearbyBirds.size;\n      this.velX += (avgX - this.x) * COHESION_FACTOR;\n      this.velY += (avgY - this.y) * COHESION_FACTOR;\n    }\n    this.keepVelocityWithinRange();\n  }\n  screenTurn() {\n    if (this.x < leftRightMargin) {\n      this.velX += useTurnFactor();\n    } else if (this.x > CANVAS_WIDTH - leftRightMargin) {\n      this.velX -= useTurnFactor();\n    }\n    if (this.y < topBottomMargin) {\n      this.velY += useTurnFactor();\n    } else if (this.y > CANVAS_HEIGHT - topBottomMargin) {\n      this.velY -= useTurnFactor();\n    }\n  }\n  update(time) {\n    let _x = this.x + this.velX * time;\n    let _y = this.y + this.velY * time;\n\n    // _x = _x.max(RADIUS.value).min(CANVAS_WIDTH - RADIUS.value)\n    // _y = _y.max(RADIUS.value).min(CANVAS_HEIGHT - RADIUS.value)\n\n    if (_x < RADIUS) {\n      _x = CANVAS_WIDTH - (RADIUS - _x);\n    } else if (_x > CANVAS_WIDTH - RADIUS) {\n      _x = _x - (CANVAS_WIDTH - RADIUS);\n    }\n    if (_y < RADIUS) {\n      _y = CANVAS_HEIGHT - (RADIUS - _y);\n    } else if (_y > CANVAS_HEIGHT - RADIUS) {\n      _y = _y - (CANVAS_HEIGHT - RADIUS);\n    }\n    this.x = _x;\n    this.y = _y;\n  }\n}","map":{"version":3,"names":["CANVAS_HEIGHT","CANVAS_WIDTH","leftRightMargin","topBottomMargin","maxSpeed","minSpeed","RADIUS","SEP_FACTOR","ALIGN_FACTOR","COHESION_FACTOR","turnFactor","useTurnFactor","Bird","constructor","initialX","initialY","initialVelX","initialVelY","x","y","velX","velY","keepVelocityWithinRange","max_sf","Math","min","sqrt","min_sf","max","separate","nearbyBirds","close_dx","close_dy","forEach","b","align","size","sumVelX","sumVelY","Array","from","reduce","acc","avgVelX","avgVelY","cohere","sumX","sumY","avgX","avgY","screenTurn","update","time","_x","_y"],"sources":["/home/yechan/imperial/side_projects/birds-flocking/src/Bird.js"],"sourcesContent":["import {\n    CANVAS_HEIGHT,\n    CANVAS_WIDTH,\n    leftRightMargin,\n    topBottomMargin,\n    maxSpeed,\n    minSpeed,\n    RADIUS,\n    SEP_FACTOR,\n    ALIGN_FACTOR,\n    COHESION_FACTOR,\n    turnFactor,\n} from \"./constants\"\n\nimport { useTurnFactor } from \"./Context\"\n\nexport class Bird {\n    constructor(initialX, initialY, initialVelX,initialVelY) {\n        this.x = initialX\n        this.y = initialY\n        this.velX = initialVelX\n        this.velY = initialVelY\n    }\n\n    keepVelocityWithinRange() {\n        // doesn't exceed maximum\n        // no divisions by 0, since speed is never 0\n        let max_sf = Math.min(maxSpeed / Math.sqrt(this.velX ** 2 + this.velY ** 2), 1)\n        this.velX *= max_sf\n        this.velY *= max_sf\n\n        // ensure velocity doesn't fall below minimum\n        let min_sf = Math.max(minSpeed / Math.sqrt(this.velX ** 2 + this.velY ** 2), 1)\n        this.velX *= min_sf\n        this.velY *= min_sf\n    }\n\n    separate(nearbyBirds) {\n        let close_dx = 0\n        let close_dy = 0\n        nearbyBirds.forEach(\n          b =>\n          {\n            close_dx += this.x - b.x\n            close_dy += this.y - b.y\n          }\n        )\n\n        if (close_dx !== 0) {\n            this.velX += SEP_FACTOR / close_dx\n        }\n        if (close_dy !== 0) {\n            this.velY += SEP_FACTOR / close_dy\n        }\n        this.keepVelocityWithinRange()\n    }\n\n    align(nearbyBirds) {\n        //console.log(\"just outside if for align\")\n        if (nearbyBirds.size > 0) {\n            //console.log(\"INSIDE ALIGN, \", typeof nearbyBirds)\n            //console.log(nearbyBirds)\n            const { sumVelX, sumVelY } = Array.from(nearbyBirds).reduce(\n                (acc, b) => ({\n                    sumVelX: acc.sumVelX + b.velX,\n                    sumVelY: acc.sumVelY + b.velY\n                }), { sumVelX: 0, sumVelY: 0 }\n            )\n            \n            let avgVelX = sumVelX / nearbyBirds.size\n            let avgVelY = sumVelY / nearbyBirds.size\n      \n\n            this.velX += (avgVelX - this.velX) * ALIGN_FACTOR\n            this.velY += (avgVelY - this.velY) * ALIGN_FACTOR\n          }\n          this.keepVelocityWithinRange()\n    }\n\n    cohere(nearbyBirds) {\n\n        // condition avoids division by 0\n        if (nearbyBirds.size > 0) {\n        \n            const { sumX, sumY } = Array.from(nearbyBirds).reduce(\n                (acc, b) => ({\n                    sumX: acc.sumX + b.x,\n                    sumY: acc.sumY + b.y\n                }), { sumX: 0, sumY: 0 }\n            )\n\n            let avgX = sumX / nearbyBirds.size\n            let avgY = sumY / nearbyBirds.size\n    \n            this.velX += (avgX - this.x) * COHESION_FACTOR\n            this.velY += (avgY - this.y) * COHESION_FACTOR\n        }\n        this.keepVelocityWithinRange()\n    }\n\n    screenTurn() {\n        if (this.x < leftRightMargin) {\n            this.velX += useTurnFactor()\n          } else if (this.x > CANVAS_WIDTH - leftRightMargin) {\n            this.velX -= useTurnFactor()\n          }\n          if (this.y < topBottomMargin) {\n            this.velY += useTurnFactor()\n          } else if (this.y > CANVAS_HEIGHT - topBottomMargin) {\n            this.velY -= useTurnFactor()\n          }\n    }\n\n    update(time) {\n        let _x = this.x + this.velX * time\n        let _y = this.y + this.velY * time\n    \n        // _x = _x.max(RADIUS.value).min(CANVAS_WIDTH - RADIUS.value)\n        // _y = _y.max(RADIUS.value).min(CANVAS_HEIGHT - RADIUS.value)\n    \n        if (_x < RADIUS) {\n          _x = CANVAS_WIDTH - (RADIUS - _x)\n        } else if (_x > CANVAS_WIDTH - RADIUS) {\n          _x = _x - (CANVAS_WIDTH - RADIUS)\n        }\n    \n        if (_y < RADIUS) {\n          _y = CANVAS_HEIGHT - (RADIUS - _y)\n        } else if (_y > CANVAS_HEIGHT - RADIUS) {\n          _y = _y - (CANVAS_HEIGHT - RADIUS)\n        }\n    \n        this.x = _x\n        this.y = _y\n    }\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}