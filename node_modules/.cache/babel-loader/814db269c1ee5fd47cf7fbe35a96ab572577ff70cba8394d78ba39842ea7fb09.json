{"ast":null,"code":"import { BIRD_COLOR, RADIUS, visibleRangeDistance } from \"./constants\";\n\n// between two birds\nconst squaredDistance = function (b1, b2) {\n  return (b1.x - b2.x) ** 2 + (b1.y - b2.y) ** 2;\n};\nexport function nearbyBirds(current, all, distance) {\n  return new Set([...all].filter(b => b !== current && squaredDistance(current, b) <= distance ** 2));\n}\nclass Point {\n  constructor(x, y) {\n    this.x = x;\n    this.y = y;\n  }\n  rotate(angle) {\n    // Calculate the rotated coordinates\n    const rotatedX = this.x * Math.cos(angle) - this.y * Math.sin(angle);\n    const rotatedY = this.x * Math.sin(angle) + this.y * Math.cos(angle);\n    return new Point(rotatedX, rotatedY);\n  }\n  transpose(dx, dy) {\n    return new Point(this.x + dx, this.y + dy);\n  }\n}\n\n// angle is bearing from horizontal to elongated vertex in radians\nexport function drawTriangle(x, y, angle, ctx) {\n  let vertex = [new Point(0, 30), new Point(10, 0), new Point(-10, 0)];\n  vertex = vertex.map(p => p.rotate(angle).transpose(x, y));\n\n  // drawing triangle\n  ctx.beginPath();\n  ctx.moveTo(vertex[0].x, vertex[0].y);\n  ctx.lineTo(vertex[1].x, vertex[1].y);\n  ctx.lineTo(vertex[2].x, vertex[2].y);\n  ctx.closePath();\n\n  // colouring\n  ctx.fillStyle = BIRD_COLOR;\n  ctx.fill();\n\n  /*\n  ctx.beginPath();\n  ctx.arc(x, y, 5, 0, 2 * Math.PI); // Draw a circle with radius 20\n  ctx.fillStyle = BIRD_COLOR; // Fill color\n  ctx.fill(); // Fill the circle with the blue color\n  ctx.closePath(); // Close the path\n  */\n}\nexport function drawCircle(x, y, ctx) {\n  ctx.beginPath();\n  ctx.arc(x, y, RADIUS, 0, 2 * Math.PI); // Draw a circle with radius 20\n  ctx.fillStyle = BIRD_COLOR; // Fill color\n  ctx.fill(); // Fill the circle with the blue color\n  ctx.closePath(); // Close the path\n}","map":{"version":3,"names":["BIRD_COLOR","RADIUS","visibleRangeDistance","squaredDistance","b1","b2","x","y","nearbyBirds","current","all","distance","Set","filter","b","Point","constructor","rotate","angle","rotatedX","Math","cos","sin","rotatedY","transpose","dx","dy","drawTriangle","ctx","vertex","map","p","beginPath","moveTo","lineTo","closePath","fillStyle","fill","drawCircle","arc","PI"],"sources":["/home/yechan/imperial/side_projects/birds-flocking/src/utilities.js"],"sourcesContent":["import { BIRD_COLOR, RADIUS, visibleRangeDistance } from \"./constants\"\n\n// between two birds\nconst squaredDistance = function (b1, b2) { \n    return (b1.x - b2.x) ** 2 + (b1.y - b2.y) ** 2\n}\n\nexport function nearbyBirds(current, all, distance) {\n    return new Set ([...all].filter(b => \n        (b !== current && squaredDistance(current, b) <= distance ** 2)\n        )    \n    )\n}\n\nclass Point {\n    constructor(\n        x,\n        y\n    ) {\n        this.x = x\n        this.y = y\n    }\n\n    rotate(angle) {\n\n        // Calculate the rotated coordinates\n        const rotatedX = this.x * Math.cos(angle) - this.y * Math.sin(angle);\n        const rotatedY = this.x * Math.sin(angle) + this.y * Math.cos(angle);\n        \n        return new Point(rotatedX, rotatedY);\n    } \n\n    transpose(dx, dy) {\n\n        return new Point(this.x + dx, this.y + dy)\n    }\n}\n\n\n// angle is bearing from horizontal to elongated vertex in radians\nexport function drawTriangle(x, y, angle, ctx) {\n\n    let vertex = [new Point(0, 30), new Point(10, 0), new Point(-10, 0)]\n    vertex = vertex.map(p => p.rotate(angle).transpose(x, y));\n    \n    // drawing triangle\n    ctx.beginPath()\n    ctx.moveTo(vertex[0].x, vertex[0].y)\n    ctx.lineTo(vertex[1].x, vertex[1].y)\n    ctx.lineTo(vertex[2].x, vertex[2].y)\n    ctx.closePath()\n\n    // colouring\n    ctx.fillStyle = BIRD_COLOR\n    ctx.fill()\n    \n        /*\n    ctx.beginPath();\n    ctx.arc(x, y, 5, 0, 2 * Math.PI); // Draw a circle with radius 20\n    ctx.fillStyle = BIRD_COLOR; // Fill color\n    ctx.fill(); // Fill the circle with the blue color\n    ctx.closePath(); // Close the path\n        */\n    }\n    \nexport function drawCircle(x, y, ctx) {\n    ctx.beginPath();\n    ctx.arc(x, y, RADIUS, 0, 2 * Math.PI); // Draw a circle with radius 20\n    ctx.fillStyle = BIRD_COLOR; // Fill color\n    ctx.fill(); // Fill the circle with the blue color\n    ctx.closePath(); // Close the path\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}