{"ast":null,"code":"import { CANVAS_HEIGHT, CANVAS_WIDTH, leftRightMargin, topBottomMargin, maxSpeed, minSpeed, RADIUS, sepFactor, alignFactor, cohesionFactor, turnFactor, BIRDS_NUM, nearbyMaxDistance } from \"./constants\";\nexport class Bird {\n  constructor(initialX, initialY, initialVelX, initialVelY) {\n    this.x = initialX;\n    this.y = initialY;\n    this.velX = initialVelX;\n    this.vely = initialVelY;\n  }\n  keepVelocityInRange() {\n    // doesn't exceed maximum\n    // no divisions by 0, since speed is never 0\n    let max_sf = math.min(maxSpeed / math.sqrt(velX ** 2 + velY ** 2), 1);\n    this.velX *= max_sf;\n    this.velY *= max_sf;\n\n    // ensure velocity doesn't fall below minimum\n    let min_sf = math.max(minSpeed / math.sqrt(velX ** 2 + velY ** 2), 1);\n    this.velX *= min_sf;\n    this.velY *= min_sf;\n  }\n  separate(nearbyBirds) {\n    let close_dx = 0;\n    let close_dy = 0;\n    nearbyBirds.foreach(b => {\n      close_dx += this.x - b.x;\n      close_dy += this.y - b.y;\n    });\n    /*\n    (close_dx, close_dy) match {\n      case (0, 0) => {}\n      case (dx, 0) => this.velX += sepFactor / close_dx\n      case (0, dy) => this.velY += sepFactor / close_dy\n      case (dx, dy) => {\n        this.velX += sepFactor / close_dx // careful of / 0\n        this.velY += sepFactor / close_dy\n      }\n    }\n      */\n    if (close_dx != 0) {\n      this.velX += sepFactor / close_dx;\n    }\n    if (close_dy != 0) {\n      this.velY += sepFactor / close_dy;\n    }\n    keepVelocityWithinRange();\n  }\n  align(nearbyBirds) {\n    if (nearbyBirds.size > 0) {\n      const {\n        sumVelX,\n        sumVelY\n      } = nearbyBirds.reduce((acc, b) => ({\n        sumVelX: acc.sumVelX + b.velX,\n        sumVelY: acc.sumVelY + b.velY\n      }), {\n        sumVelX: 0,\n        sumVelY: 0\n      });\n      let avgVelX = sumVelX / nearbyBirds.size;\n      let avgVelY = sumVelY / nearbyBirds.size;\n      this.velX += (avgVelX - this.velX) * alignFactor;\n      this.velY += (avgVelY - this.velY) * alignFactor;\n    }\n    keepVelocityWithinRange();\n  }\n  cohere(nearbyBirds) {\n    // condition avoids division by 0\n    if (nearbyBirds.size > 0) {\n      /*\n      let (sumCentreX, sumCentreY) = nearbyBirds.map(\n      b => (b.x, b.y)\n      ).reduce(\n      (b1, b2) => (b1._1 + b2._1, b1._2 + b2._2)\n      )\n      */\n\n      const {\n        sumX,\n        sumY\n      } = nearbyBirds.reduce((acc, b) => ({\n        sumX: acc.sumX + b.x,\n        sumY: acc.sumY + b.y\n      }), {\n        sumX: 0,\n        sumY: 0\n      });\n      let avgX = sumX / nearbyBirds.size;\n      let avgY = sumY / nearbyBirds.size;\n      this.velX += (avgX - this.x) * cohesionFactor;\n      this.velY += (avgY - this.y) * cohesionFactor;\n    }\n    keepVelocityWithinRange();\n  }\n  screenTurn(nearbyBirds) {\n    if (x < leftRightMargin) {\n      velX += turnFactor;\n    } else if (x > CANVAS_WIDTH - leftRightMargin) {\n      velX -= turnFactor;\n    }\n    if (y < topBottomMargin) {\n      velY += turnFactor;\n    } else if (y < CANVAS_HEIGHT - topBottomMargin) {\n      velY -= turnFactor;\n    }\n  }\n  update(time) {\n    let _x = x + velX * time;\n    let _y = y + velY * time;\n\n    // _x = _x.max(RADIUS.value).min(CANVAS_WIDTH - RADIUS.value)\n    // _y = _y.max(RADIUS.value).min(CANVAS_HEIGHT - RADIUS.value)\n\n    if (_x < RADIUS) {\n      _x = CANVAS_WIDTH - (RADIUS - _x);\n    } else if (_x > CANVAS_WIDTH - RADIUS) {\n      _x = _x - (CANVAS_WIDTH - RADIUS);\n    }\n    if (_y < RADIUS) {\n      _y = CANVAS_HEIGHT - (RADIUS - _y);\n    } else if (_y > CANVAS_HEIGHT - RADIUS) {\n      _y = _y - (CANVAS_HEIGHT - RADIUS);\n    }\n    x = _x;\n    y = _y;\n  }\n}","map":{"version":3,"names":["CANVAS_HEIGHT","CANVAS_WIDTH","leftRightMargin","topBottomMargin","maxSpeed","minSpeed","RADIUS","sepFactor","alignFactor","cohesionFactor","turnFactor","BIRDS_NUM","nearbyMaxDistance","Bird","constructor","initialX","initialY","initialVelX","initialVelY","x","y","velX","vely","keepVelocityInRange","max_sf","math","min","sqrt","velY","min_sf","max","separate","nearbyBirds","close_dx","close_dy","foreach","b","keepVelocityWithinRange","align","size","sumVelX","sumVelY","reduce","acc","avgVelX","avgVelY","cohere","sumX","sumY","avgX","avgY","screenTurn","update","time","_x","_y"],"sources":["/home/yechan/imperial/side_projects/birds-flocking/src/Bird.js"],"sourcesContent":["import {\n    CANVAS_HEIGHT,\n    CANVAS_WIDTH,\n    leftRightMargin,\n    topBottomMargin,\n    maxSpeed,\n    minSpeed,\n    RADIUS,\n    sepFactor,\n    alignFactor,\n    cohesionFactor,\n    turnFactor,\n    BIRDS_NUM,\n    nearbyMaxDistance\n} from \"./constants\"\n\nexport class Bird {\n    constructor(initialX, initialY, initialVelX,initialVelY) {\n        this.x = initialX\n        this.y = initialY\n        this.velX = initialVelX\n        this.vely = initialVelY\n    }\n\n    keepVelocityInRange() {\n        // doesn't exceed maximum\n        // no divisions by 0, since speed is never 0\n        let max_sf = math.min(maxSpeed / math.sqrt(velX ** 2 + velY ** 2), 1)\n        this.velX *= max_sf\n        this.velY *= max_sf\n\n        // ensure velocity doesn't fall below minimum\n        let min_sf = math.max(minSpeed / math.sqrt(velX ** 2 + velY ** 2), 1)\n        this.velX *= min_sf\n        this.velY *= min_sf\n    }\n\n    separate(nearbyBirds) {\n        let close_dx = 0\n        let close_dy = 0\n        nearbyBirds.foreach(\n          b =>\n          {\n            close_dx += this.x - b.x\n            close_dy += this.y - b.y\n          }\n        )\n        /*\n        (close_dx, close_dy) match {\n          case (0, 0) => {}\n          case (dx, 0) => this.velX += sepFactor / close_dx\n          case (0, dy) => this.velY += sepFactor / close_dy\n          case (dx, dy) => {\n            this.velX += sepFactor / close_dx // careful of / 0\n            this.velY += sepFactor / close_dy\n          }\n        }\n          */\n        if (close_dx != 0) {\n            this.velX += sepFactor / close_dx\n        }\n        if (close_dy != 0) {\n            this.velY += sepFactor / close_dy\n        }\n        keepVelocityWithinRange()\n    }\n\n    align(nearbyBirds) {\n        if (nearbyBirds.size > 0) {\n\n            const { sumVelX, sumVelY } = nearbyBirds.reduce(\n                (acc, b) => ({\n                    sumVelX: acc.sumVelX + b.velX,\n                    sumVelY: acc.sumVelY + b.velY\n                }), { sumVelX: 0, sumVelY: 0 }\n            )\n            \n            let avgVelX = sumVelX / nearbyBirds.size\n            let avgVelY = sumVelY / nearbyBirds.size\n      \n\n            this.velX += (avgVelX - this.velX) * alignFactor\n            this.velY += (avgVelY - this.velY) * alignFactor\n          }\n          keepVelocityWithinRange()\n    }\n\n    cohere(nearbyBirds) {\n\n        // condition avoids division by 0\n        if (nearbyBirds.size > 0) {\n            /*\n            let (sumCentreX, sumCentreY) = nearbyBirds.map(\n            b => (b.x, b.y)\n            ).reduce(\n            (b1, b2) => (b1._1 + b2._1, b1._2 + b2._2)\n            )\n            */\n\n            const { sumX, sumY } = nearbyBirds.reduce(\n                (acc, b) => ({\n                    sumX: acc.sumX + b.x,\n                    sumY: acc.sumY + b.y\n                }), { sumX: 0, sumY: 0 }\n            )\n\n            let avgX = sumX / nearbyBirds.size\n            let avgY = sumY / nearbyBirds.size\n    \n            this.velX += (avgX - this.x) * cohesionFactor\n            this.velY += (avgY - this.y) * cohesionFactor\n        }\n        keepVelocityWithinRange()\n    }\n\n    screenTurn(nearbyBirds) {\n        if (x < leftRightMargin) {\n            velX += turnFactor\n          } else if (x > CANVAS_WIDTH - leftRightMargin) {\n            velX -= turnFactor\n          }\n          if (y < topBottomMargin) {\n            velY += turnFactor\n          } else if (y < CANVAS_HEIGHT - topBottomMargin) {\n            velY -= turnFactor\n          }\n    }\n\n    update(time) {\n        let _x = x + velX * time\n        let _y = y + velY * time\n    \n        // _x = _x.max(RADIUS.value).min(CANVAS_WIDTH - RADIUS.value)\n        // _y = _y.max(RADIUS.value).min(CANVAS_HEIGHT - RADIUS.value)\n    \n        if (_x < RADIUS) {\n          _x = CANVAS_WIDTH - (RADIUS - _x)\n        } else if (_x > CANVAS_WIDTH - RADIUS) {\n          _x = _x - (CANVAS_WIDTH - RADIUS)\n        }\n    \n        if (_y < RADIUS) {\n          _y = CANVAS_HEIGHT - (RADIUS - _y)\n        } else if (_y > CANVAS_HEIGHT - RADIUS) {\n          _y = _y - (CANVAS_HEIGHT - RADIUS)\n        }\n    \n        x = _x\n        y = _y\n    }\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}