{"ast":null,"code":"var _jsxFileName = \"/home/yechan/imperial/side_projects/birds-flocking/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState, useRef } from 'react';\nimport './App.css';\nimport { Bird } from './Bird.js';\nimport { MAX_TURN_FACTOR, INITIAL_TURN_FACTOR, BACKGROUND_COLOR, BIRDS_NUM, CANVAS_HEIGHT, CANVAS_WIDTH, PROTECTED_RANGE_DISTANCE, visibleRangeDistance } from './constants';\nimport { nearbyBirds, drawTriangle, drawCircle } from './utilities.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction SliderComponent({\n  turnFactor,\n  setTurnFactor\n}) {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"sliders\",\n    children: /*#__PURE__*/_jsxDEV(\"label\", {\n      children: [\"Screen Turn:\", /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"range\",\n        min: \"0\",\n        max: MAX_TURN_FACTOR,\n        step: \"1\",\n        value: turnFactor,\n        onChange: e => setTurnFactor(parseFloat(e.target.value))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 14,\n        columnNumber: 9\n      }, this), turnFactor.toFixed(1)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 12,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 11,\n    columnNumber: 5\n  }, this);\n}\n_c = SliderComponent;\nfunction App() {\n  _s();\n  const [turnFactor, setTurnFactor] = useState(INITIAL_TURN_FACTOR);\n\n  // Initialize birds\n  const initialBirds = Array.from({\n    length: BIRDS_NUM\n  }, () => new Bird(Math.random() * CANVAS_WIDTH, Math.random() * CANVAS_HEIGHT, Math.random() * 100 - 15,\n  // Adjusted to include negative velocities\n  Math.random() * 100 - 15 // Adjusted to include negative velocities\n  ));\n  const [birds, setBirds] = useState(initialBirds);\n  const canvasRef = useRef(null);\n  const prevTimestamp = useRef(0);\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext('2d');\n    if (!ctx) {\n      console.error('Failed to get canvas context');\n      return;\n    }\n    let animationFrameId;\n    const updateFrame = timestamp => {\n      if (!prevTimestamp.current) {\n        prevTimestamp.current = timestamp;\n      }\n      console.log(\"running update frame, turn factor:\", turnFactor);\n      const deltaTime = (timestamp - prevTimestamp.current) / 1000; // Convert to seconds\n      prevTimestamp.current = timestamp;\n\n      // Update birds' states\n      const updatedBirds = birds.map(bird => {\n        let inProtectedRange = nearbyBirds(bird, birds, PROTECTED_RANGE_DISTANCE);\n        let inVisibleRange = nearbyBirds(bird, birds, visibleRangeDistance);\n        bird.separate(inProtectedRange);\n        bird.align(inVisibleRange);\n        bird.cohere(inVisibleRange);\n        bird.screenTurn(turnFactor);\n        return bird;\n      });\n\n      // Clear the canvas and redraw birds\n      ctx.clearRect(0, 0, CANVAS_WIDTH, CANVAS_HEIGHT);\n      ctx.fillStyle = BACKGROUND_COLOR;\n      ctx.fillRect(0, 0, CANVAS_WIDTH, CANVAS_HEIGHT);\n      updatedBirds.forEach(bird => {\n        bird.update(deltaTime);\n        // drawTriangle(bird.x, bird.y, Math.atan(bird.velY, bird.velX), ctx)\n        drawCircle(bird.x, bird.y, ctx);\n      });\n\n      // Update the state with the new birds' positions\n      setBirds(updatedBirds);\n\n      // Request the next frame\n      animationFrameId = requestAnimationFrame(updateFrame);\n    };\n\n    // Start the animation loop\n    animationFrameId = requestAnimationFrame(updateFrame);\n\n    // Cleanup function\n    return () => {\n      cancelAnimationFrame(animationFrameId);\n      prevTimestamp.current = 0; // Reset timestamp on cleanup\n    };\n  }, [turnFactor]); // Empty array to ensure this effect runs only once\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Birds Flocking Simulation\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"canvas-wrapper\",\n      children: /*#__PURE__*/_jsxDEV(\"canvas\", {\n        className: \"canvas\",\n        ref: canvasRef,\n        width: CANVAS_WIDTH,\n        height: CANVAS_HEIGHT,\n        style: {\n          display: 'block'\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"sliders\",\n      children: /*#__PURE__*/_jsxDEV(SliderComponent, {\n        turnFactor: turnFactor,\n        setTurnFactor: setTurnFactor\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 106,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"qZKPPjivmf+MJZElwOmjCxo8sSc=\");\n_c2 = App;\nexport default App;\nvar _c, _c2;\n$RefreshReg$(_c, \"SliderComponent\");\n$RefreshReg$(_c2, \"App\");","map":{"version":3,"names":["React","useEffect","useState","useRef","Bird","MAX_TURN_FACTOR","INITIAL_TURN_FACTOR","BACKGROUND_COLOR","BIRDS_NUM","CANVAS_HEIGHT","CANVAS_WIDTH","PROTECTED_RANGE_DISTANCE","visibleRangeDistance","nearbyBirds","drawTriangle","drawCircle","jsxDEV","_jsxDEV","SliderComponent","turnFactor","setTurnFactor","className","children","type","min","max","step","value","onChange","e","parseFloat","target","fileName","_jsxFileName","lineNumber","columnNumber","toFixed","_c","App","_s","initialBirds","Array","from","length","Math","random","birds","setBirds","canvasRef","prevTimestamp","canvas","current","ctx","getContext","console","error","animationFrameId","updateFrame","timestamp","log","deltaTime","updatedBirds","map","bird","inProtectedRange","inVisibleRange","separate","align","cohere","screenTurn","clearRect","fillStyle","fillRect","forEach","update","x","y","requestAnimationFrame","cancelAnimationFrame","ref","width","height","style","display","_c2","$RefreshReg$"],"sources":["/home/yechan/imperial/side_projects/birds-flocking/src/App.js"],"sourcesContent":["import React, { useEffect, useState, useRef } from 'react';\nimport './App.css';\nimport { Bird } from './Bird.js';\nimport { MAX_TURN_FACTOR, INITIAL_TURN_FACTOR, BACKGROUND_COLOR, BIRDS_NUM, CANVAS_HEIGHT, CANVAS_WIDTH, PROTECTED_RANGE_DISTANCE, visibleRangeDistance } from './constants';\nimport { nearbyBirds, drawTriangle, drawCircle } from './utilities.js';\n\n\nfunction SliderComponent({ turnFactor, setTurnFactor }) {\n\n  return (\n    <div className=\"sliders\">\n      <label>\n        Screen Turn:\n        <input\n          type=\"range\"\n          min=\"0\"\n          max={MAX_TURN_FACTOR}\n          step=\"1\"\n          value={turnFactor}\n          onChange={(e) => setTurnFactor(parseFloat(e.target.value))}\n        />\n        {turnFactor.toFixed(1)}\n      </label>\n    </div>\n  );\n}\n\nfunction App() {\n\n  const [turnFactor, setTurnFactor] = useState(INITIAL_TURN_FACTOR)\n\n  // Initialize birds\n  const initialBirds = Array.from({ length: BIRDS_NUM }, () => \n    new Bird(\n      Math.random() * CANVAS_WIDTH,\n      Math.random() * CANVAS_HEIGHT,\n      Math.random() * 100 - 15, // Adjusted to include negative velocities\n      Math.random() * 100 - 15  // Adjusted to include negative velocities\n    )\n  );\n  \n  const [birds, setBirds] = useState(initialBirds);\n  const canvasRef = useRef(null);\n  const prevTimestamp = useRef(0);\n\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext('2d');\n    if (!ctx) {\n      console.error('Failed to get canvas context');  \n      return;\n    }\n\n    let animationFrameId\n\n    const updateFrame = (timestamp) => {\n      if (!prevTimestamp.current) {\n        prevTimestamp.current = timestamp;\n      }\n\n      console.log(\"running update frame, turn factor:\", turnFactor)\n      const deltaTime = (timestamp - prevTimestamp.current) / 1000; // Convert to seconds\n      prevTimestamp.current = timestamp;\n\n      // Update birds' states\n      const updatedBirds = birds.map(bird => {\n        let inProtectedRange = nearbyBirds(bird, birds, PROTECTED_RANGE_DISTANCE)\n        let inVisibleRange = nearbyBirds(bird, birds, visibleRangeDistance);\n        bird.separate(inProtectedRange);\n        bird.align(inVisibleRange);\n        bird.cohere(inVisibleRange);\n        bird.screenTurn(turnFactor);\n        return bird;\n      });\n\n      // Clear the canvas and redraw birds\n      ctx.clearRect(0, 0, CANVAS_WIDTH, CANVAS_HEIGHT)\n      ctx.fillStyle = BACKGROUND_COLOR\n      ctx.fillRect(0, 0, CANVAS_WIDTH, CANVAS_HEIGHT)\n\n      updatedBirds.forEach(bird => {\n        bird.update(deltaTime)\n        // drawTriangle(bird.x, bird.y, Math.atan(bird.velY, bird.velX), ctx)\n        drawCircle(bird.x, bird.y, ctx)\n        \n      });\n\n      // Update the state with the new birds' positions\n      setBirds(updatedBirds);\n\n      // Request the next frame\n      animationFrameId = requestAnimationFrame(updateFrame);\n    };\n\n    // Start the animation loop\n    animationFrameId = requestAnimationFrame(updateFrame);\n\n    // Cleanup function\n    return () => {\n      cancelAnimationFrame(animationFrameId)  \n      prevTimestamp.current = 0; // Reset timestamp on cleanup\n    };\n  }, [turnFactor]); // Empty array to ensure this effect runs only once\n\n  return (\n    <div className=\"App\">\n      <h1>Birds Flocking Simulation</h1>\n      <div className=\"canvas-wrapper\">\n        <canvas className=\"canvas\"\n          ref={canvasRef}\n          width={CANVAS_WIDTH}\n          height={CANVAS_HEIGHT}\n          style={{ display: 'block' }}\n        />\n      </div>\n      <div className=\"sliders\">\n        <SliderComponent turnFactor={turnFactor} setTurnFactor={setTurnFactor}/>\n\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}